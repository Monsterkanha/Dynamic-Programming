Here, we take this current as our part of subsequenece.

Here, we find no. maximum length of subsequence of left side using left array and similarily on right side.

int Solution::longestSubsequenceLength(const vector<int> &A) {
    int n = A.size();
    vector<int> dp1(n+1) , dp2(n+1);

    for(int i = 1; i <= n; i++){
        dp1[i] = 1;
        for(int j = 1; j < i ; j++){
            if(A[j-1] < A[i-1] && dp1[i] < 1 + dp1[j]){           // Here, We will have previous index. and increase dp size.
                dp1[i] = dp1[j]  + 1;
            }
        }
    }
    for(int i = n; i >= 1; i--){
        dp2[i] = 1;
        for(int j = n; j  > i ; j--){
            if(A[j-1] < A[i-1] && dp2[i] < 1 + dp2[j]){
                dp2[i] = dp2[j]  + 1;
            }
        }
    }
    int ans = 0;
    for(int i = 1; i <= n; i++){
        ans = max(ans, dp1[i]+ dp2[i] -1);
    }
    return ans;
}


1 11 2 3 10
1 
1 11 
1 2 
1 2 3
1 2 3 10
