lets suppose our dp is 2d contain 2 information about start and end;
dp[i][j] = maximum score we get from removing boxes from i to j.
if there is continuous block of boxes then we will prefer to remove all boxes in one go because
( a + b) ^2 > a ^2 + b^2 , a > 0 and b > 0 ;

but wait there could be some non-contiguous block which could be remove in contiguous form.
so our information is not self-contained so we would need to create one more variable. 

lets say its k = number of boxes of same colour of l are on left than can be remove together.


The termination conditions now will be:
a. T(i, i - 1, k) = 0: no boxes so no points, and this is true for any k (you can interpret it as nowhere to attach the boxes).
b. T(i, i, k) = (k + 1) * (k + 1): only one box left in the subarray but we've already got k boxes of the same color attached to its left,
so the total number of boxes of the same color is (k + 1) and the maximum point is (k + 1) * (k + 1).

The recurrence relation is as follows and the maximum points will be the larger of the two cases:
a. If we remove boxes[i] first, we get (k + 1) * (k + 1) + T(i + 1, j, 0) points, where for the first term, instead of 1 we again get (k + 1) * (k + 1)
points for removing boxes[i] due to the attached boxes to its left; and for the second term there will be no attached boxes so we have the 0 in this term.

b. If we decide to attach boxes[i] to some other box of the same color, say boxes[m], then from our analyses above, the total points will be
T(i + 1, m - 1, 0) + T(m, j, k + 1), where for the first term, since there is no attached boxes for subarray boxes[i + 1, m - 1], we have k = 0 for this part; 
while for the second term, the total number of attached boxes for subarray boxes[m, j] will increase by 1 because apart from the original k boxes, we have to account for boxes[i]now,
so we have k + 1 for this term. But we are not done yet. What if there are multiple boxes of the same color as boxes[i] within subarray boxes[i + 1, j]? We have to try each of them and
choose the one that yields the maximum points. Therefore the final answer for this case will be: max(T(i + 1, m - 1, 0) + T(m, j, k + 1))
where i < m <= j && boxes[i] == boxes[m].


we will get k by the condition by boxes[l] == boxes[l+1] k++;



class Solution {
public:
    int removeBoxes(vector<int>& boxes) {
        int n = boxes.size();
        int dp[110][110][110] = {};
        
        function<int(int,int ,int )> solve = [&](int i, int j, int k){
            if(i > j) return 0;
            if(dp[i][j][k]) return dp[i][j][k];
            int iorg = i, korg = k;
            while(i < j && boxes[i] == boxes[i+1]){
                i++, k++;
            }
            int ans = (k+1)*(k+1) + solve(i+1,j,0);   // why k + 1 because see the loop condition we will be 
                                                    // at last pointing to one which have the same color as st.
            
            // we could merge some boxes.
            for(int m = i + 1; m <= j; m++){
                if(boxes[m] == boxes[i]){
                    ans = max(ans, solve(i+1,m-1,0) + solve(m, j, k+1));
                }
            }
            return dp[iorg][j][korg] = ans;
        };
        
        
        
        return solve(0, n-1,0);
    }
};


