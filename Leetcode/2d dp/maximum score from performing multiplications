Here, consider an array nums. Here you can either remove from left or from right.
and a mult array.

1. a function or array that gives us answer. 
  Either we remove from left or from right of current array.
  Instead of deleting elements we just move the pointer.
at each point we need to know 

  1. how many mult have done so far.
  2. How many elements i have taken from left.
  3. How many from right.
Right can be calculated by left and total operatoins.
so state variable i , left 
i will tells us the total operations done so far and left will tell us 
the left elements used. 

2. Recurrence relation :- 
right = n - 1 - ( i - left);
  dp(i , j) = either take right or left.
            = nums[left]*m[i] + dp(i+ 1, left + 1) 
              or nums[right]*m[i] + dp(i+1, left);
              
3. Base case :-
if i == m then return 0;





class Solution {
public:
    int maximumScore(vector<int>& nums, vector<int>& multipliers) {
        int n = nums.size(), m = multipliers.size();
        vector<vector<int>> dp(m , vector<int>(m+1, -1));
        
        function<int(int,int)> solve = [&](int i , int left){
            if(i == m) return 0;
            if(dp[i][left] != -1)   return dp[i][left];
            
            dp[i][left] = max(nums[left]*multipliers[i] + solve(i+1, left + 1), nums[n-1-(i-left)]*multipliers[i] + solve(i+1,left));
            return dp[i][left];
        };
        
        
        return solve(0,0);
    }
};
