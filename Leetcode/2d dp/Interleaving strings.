Framework :- 
1. ith means ith character of string s1 we are on. 
2 jth means jth character of string s2 we are on.

now solve(i, j) return true if it is possible to form string res using first s1 upto ith index and s2 upto jth index.

2. Recurrence :-
here, if ith character of s1 matches with i + j + 1 character of res then solve(i - 1, j);
same for j.
why ? i+ j + 1 since 0 based index i = n- 1,  j = m - 1 , i + j + 1 = n + m -1

3. Base :-
if(i < 0) then string will be formed by all character of j.
if(i < 0)   return (s2.substr(0,j +1) == s3.substr(0, i + j + 2)) ? 1: 0;   
// substr :- start pos , size.




class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int s = s1.size() , t = s2.size() , n = s3.size();
        if(n != s + t) return 0;
        if(s <= 0)   return s2 == s3;
        if(t <= 0)   return s1 == s3;
        int dp[s+1][t+1];
        memset(dp, -1, sizeof(dp));
        
        
        function<int(int, int)> solve = [&](int i, int j){
           
            if(i < 0)   return (s2.substr(0,j +1) == s3.substr(0, i + j + 2)) ? 1: 0;  // start, len. 
            if(j < 0)   return (s1.substr(0, i+ 1) == s3.substr(0, i + j + 2))? 1: 0;
            
            if(dp[i][j] != -1) return dp[i][j];  // if value was stored.
            int ans = 0;
            if(s1[i] == s3[i+j+1]){  // Matches with s1 last char then reduce s1 length by 1.
                ans |= solve(i-1, j);
            }
            if(s2[j] == s3[i+j+1]){  // s2 length by 1.
                ans |= solve(i,j-1);
            }
            return dp[i][j] = ans;
            
        };
        
        return solve(s-1, t-1); 
    }
};
