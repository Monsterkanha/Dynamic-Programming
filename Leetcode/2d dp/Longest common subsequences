1. two state variable i , and j. 
here dp(i , j ) tells the longest commong subsequence upto ith index and jth index.

2. Recurrence 
if(a[i] == b[j]) then dp(i , j ) = 1  + dp(i -1, j-1);
else either delete one element from right of a or from b
instead of delete we will just move the pointer.

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int n = text1.size(), m = text2.size();
        vector<vector<int>> dp(n, vector<int>(m,-1));
        
        function<int(int , int)> solve = [&](int i , int j){
            if(i < 0 || j < 0) return 0;
            
            if(dp[i][j] != -1) return dp[i][j];
            
            if(text1[i] == text2[j]){
                return dp[i][j] = 1 + solve(i-1,j-1);
            }
            return dp[i][j] = max(solve(i-1 , j) , solve(i , j-1));
        };
        
        return solve(n-1, m-1);
    }
};
