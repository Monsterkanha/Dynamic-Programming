1. Here, 
swap[n] that we are minimum swaps required to make A[i] and B[i] increasing for  1<=i <= n. in condition we swap A[n] and B[n].
not_swap[n] is the same with A[n] and B[n] not swapped.

A[i - 1] < A[i] && B[i - 1] < B[i].
In this case, if we want to keep A and B increasing before the index i, can only have two choices.
-> 1.1 don't swap at (i-1) and don't swap at i, we can get not_swap[i] = not_swap[i-1]
-> 1.2 swap at (i-1) and swap at i, we can get swap[i] = swap[i-1]+1
if swap at (i-1) and do not swap at i, we can not guarantee A and B increasing.

A[i-1] < B[i] && B[i-1] < A[i]
In this case, if we want to keep A and B increasing before the index i, can only have two choices.
-> 2.1 swap at (i-1) and do not swap at i, we can get notswap[i] = Math.min(swap[i-1], notswap[i] )
-> 2.2 do not swap at (i-1) and swap at i, we can get swap[i]=Math.min(notswap[i-1]+1, swap[i])


Here  i am representing swap[i] by dp[i][1] and not_swap[i] by dp[i][0]. 

class Solution {
public:
    int minSwap(vector<int>& a, vector<int>& b) {
        int n = a.size();
        vector<vector<int>> dp(n , vector<int>(2,INT_MAX));
        dp[0][0] = 0, dp[0][1] = 1;
        for(int i = 1; i < n; i++){
            if(a[i-1] < a[i] && b[i-1] < b[i]){
                dp[i][0] = dp[i-1][0];
                dp[i][1] = dp[i-1][1] + 1;
            }
            if(a[i-1] < b[i] && b[i-1] < a[i]){
                dp[i][0] = min(dp[i][0], dp[i-1][1]);
                dp[i][1] = min(dp[i][1], dp[i-1][0] + 1);
            }
        }
        return min(dp[n-1][0], dp[n-1][1]);
    }
};



// Either I will swap it or not swap it. 
// If i not swap it


// 1 7 8 9 5
// 1 2 3 4 10

// dp[i][2] = ith index i am on and 2nd variable will tell me whether i have swapped current element or not.
