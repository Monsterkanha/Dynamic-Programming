Framework:-
1. ith day so one state variable. 
2. holding whether we are holding or not.

dp(i , holding) maximum profit if we are on ith day we holding == 1 or 0.

Recurrence:-
1. if we are holding :- either sell or do nothing.
  if we sell then we cannot buy on next day so next state = (i + 2, 0);
  or do nothing = i + 1, holding.
2. if we not holding then we can buy or do nothing:
  if we buy then next state = (i + 1, 1);
  or do nothing = i + 1, holding.
  
  
Base case i >= n return 0;


class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        if(n <= 1) return 0;
        int dp[n][2];
        memset(dp , -1, sizeof(dp));
        
        
        function<int(int, int)> solve = [&](int i, int holding){
            if(i >= n) return 0;
            
            if(dp[i][holding] != -1) return dp[i][holding];
            
            int maxProfit = 0;
            if(holding == 1){
                int sell = prices[i] + solve(i+2, 0);     // cooldown so skip one day.
                int doNothing = solve(i+1, holding);    
                maxProfit = max(sell , doNothing);
            }
            else{
                int buy = -prices[i] + solve(i+1,1);
                int doNothing = solve(i+1, holding);
                maxProfit = max(buy, doNothing);
            }
            return dp[i][holding] = maxProfit;
        };
        
        return solve(0 , 0);
    }
};
