Here, we iterate on the each coin only once never go back else it will create 
1 + 1 + 2,  1  +2 +1 but both are same..



top down 
1. using first i coins number of ways to get amount .
2. recurrence if we can pick this then reduced amount or do nothing.
3. base if amt == 0 then one way.


class Solution {
public:
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        
        vector<vector<int>> dp(n , vector<int>(amount + 1 , -1));
        
        function<int(int, int)> solve = [&](int i, int amt){
            if(i < 0 || amt < 0) return 0;
            if(amt == 0) return 1;
            if(dp[i][amt] != -1) return dp[i][amt];
            
            dp[i][amt] = solve(i-1,amt);
            if(coins[i] <= amt){     // Pick this coin now try for reduced states.
                dp[i][amt] += solve(i, amt-coins[i]) ;
            }
            return dp[i][amt];
        };
        
        return solve(n-1, amount);
    }
};


2. Iterative :-

Here ordered count only.
class Solution {
public:
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        vector<vector<int>> dp(n+1, vector<int> (amount + 1, 0));
        for(int i = 0 ; i <= n; i++){
            dp[i][0] = 1;
        }
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= amount; j++){
                dp[i][j] = dp[i-1][j];
                if(coins[i-1] <= j){
                    dp[i][j] += dp[i][j-coins[i-1]]; 
                }
            }
        }
        return dp[n][amount];
    }
};
