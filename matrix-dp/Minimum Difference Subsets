s1 + s2  = sum
s1 - s2  = diff

2s2 = sum - diff
diff = sum  - 2*s2

s2 we want to maximize and maximum bound is sum/2. 
You can use knapsack to evaluate maximum profit you can get while sum/2 is our bound.


int Solution::solve(vector<int> &A) {
    int sum = 0;
    for(auto x: A)  sum += x;
    int val = sum;
    sum /= 2;
    int n = A.size();
    vector<vector<int8_t>> dp(n+1, vector<int8_t>(sum+1,0));
    for(int i = 0 ; i <= n ; i++){
        dp[i][0] = true;
    }
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= sum ; j++){
            dp[i][j] = dp[i-1][j];
            if(j - A[i-1] >= 0){
                dp[i][j] = dp[i][j] || dp[i-1][j-A[i-1]];
            }
        }
    } 
    int ans = 0;
    for(int i = sum; i >= 0; i--){
        if(dp[n][i]){
            ans = i;
            break;
        }
    }
    return val - 2*ans;
}



2. Using Knapsack :-


dp[i][j] will contain maximum profit we can get using first i elements and where bag limit is j.

int Solution::solve(vector<int> &A) {
    int sum = 0;
    for(auto x: A)  sum += x;
    int val = sum;
    sum /= 2;
    int n = A.size();
    vector<vector<int>> dp(n+1, vector<int>(sum+1,0));
   
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= sum ; j++){
            dp[i][j] = dp[i-1][j];
            if(j - A[i-1] >= 0){
                dp[i][j] = max(dp[i][j] , A[i-1] + dp[i-1][j-A[i-1]]);
            }
        }
    } 

    return val - 2*dp[n][sum];
}

