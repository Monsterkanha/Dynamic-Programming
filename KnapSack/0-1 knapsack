Here, simple principle either i will take current element or not take.

If I take then add its value and find for the weight that is W- curr weight.
else just don't and find for previous value.


dp[i][j] gives the maximum profit with i element with capacity j.


int Solution::solve(vector<int> &A, vector<int> &B, int C) {
    int n = A.size();

    vector<vector<int>> dp(n+1, vector<int>(C+1 ,0));
    for(int i = 1; i <= n; i++){
        for(int j = 1; j <= C; j++){
            dp[i][j] = dp[i-1][j];
            if(B[i-1] <= j){
                dp[i][j] = max(dp[i][j] ,A[i-1] + dp[i-1][j-B[i-1]]);
            }
        }
    }
    return dp[n][C];

}
