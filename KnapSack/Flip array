Here, we divide in two partition,
s1 contain all the positive and s2 will contain all the negative.

s1 + s2 = sum
s1 - s2 = diff

sum - 2*s2 = diff;
we minimize diff, so maximize s2. 

partition sum sum/2;
here dp[i][j] here no. of steps to get this sum using previous value. 


int Solution::solve(const vector<int> &A) {
    int sum=0 , n = A.size();
    for(int i=0;i<A.size();i++) sum+=A[i];
    sum/=2;
    vector<vector<int>> dp(n+1, vector<int>(sum+1, INT_MAX));
    dp[0][
        
    ]=0;
    for(int i=0;i<A.size();i++)
    {
        for(int j=sum;j>=A[i];j--)
        {
            if(dp[j-A[i]]!=INT_MAX) dp[j]=min(dp[j], dp[j-A[i]]+1);
        }
    }
    for(int i=sum;i>=0 ;i--)
    {
        if(dp[i]!=INT_MAX) return dp[i];
    }
}
