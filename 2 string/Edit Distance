Here, suppose somehow we know answer for s1[0 to i) and s2[0 to j)

Now, if s1[i] == s2[j] then we have to do nothing 
else we try to do operation.

To apply DP, we define the state dp[i][j] to be the minimum number of operations to convert word1[0..i) to word2[0..j).

For the base case, that is, to convert a string to an empty string, the mininum number of operations (deletions) is just the length of the string. So we have dp[i][0] = i and dp[0][j] = j.

For the general case to convert word1[0..i) to word2[0..j), we break this problem down into sub-problems. Suppose we have already known how to convert word1[0..i - 1) to word2[0..j - 1) (dp[i - 1][j - 1]), if word1[i - 1] == word2[j - 1], then no more operation is needed and dp[i][j] = dp[i - 1][j - 1].

If word1[i - 1] != word2[j - 1], we need to consider three cases.

Replace word1[i - 1] by word2[j - 1] (dp[i][j] = dp[i - 1][j - 1] + 1);
If word1[0..i - 1) = word2[0..j) then delete word1[i - 1] (dp[i][j] = dp[i - 1][j] + 1);
If word1[0..i) + word2[j - 1] = word2[0..j) then insert word2[j - 1] to word1[0..i) (dp[i][j] = dp[i][j - 1] + 1).

class Solution {
public:
    int minDistance(string word1, string word2) {
        int m = word1.size(), n = word2.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for (int i = 1; i <= m; i++) {
            dp[i][0] = i;
        }
        for (int j = 1; j <= n; j++) {
            dp[0][j] = j;
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (word1[i - 1] == word2[j - 1]) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = min(dp[i - 1][j - 1], min(dp[i][j - 1], dp[i - 1][j])) + 1;
                }
            }
        }
        return dp[m][n];
    }
};

2. Recursive start from last index. 
And memoize your solution. If last of both do match then we do not need to do any operation for this index. and pass our table to left side.

int n , m;

int solve(int i , int j , string& A, string& B, vector<vector<int>>& memo){
    if(i <= 0 || j <= 0) return max(i , j);
    if(memo[i][j] != -1) return memo[i][j];

    if(A[i-1] == B[j-1]){
        return memo[i][j] = solve(i-1 , j-1, A, B, memo);
    }
    return memo[i][j] = 1 + min(solve(i-1, j-1, A,B, memo) , min(solve(i-1,j,A,B, memo) , solve(i, j-1, A, B, memo)));

}

int Solution::minDistance(string A, string B) {
    n = A.size() , m = B.size();
    vector<vector<int>> memo(n+1, vector<int>(m+1,-1));
    return solve(n, m, A, B , memo);
}
