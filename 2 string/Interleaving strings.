Here, either last character of C is in A or in B then call recursively for previous. 
and use memoization. to recursively. 

int Solution::isInterleave(string A, string B, string C) {
    int n = A.size() , m = B.size() , o = C.size();
    vector<vector<int8_t>> dp(n+1 , vector<int8_t>(m+1, -1));

    function<int8_t(int , int)> solve = [&](int i , int j){
        if(i == 0 && j == 0){
            return dp[i][j] = true;
        }
        if(dp[i][j] != -1) return dp[i][j];
        dp[i][j] = false;
        if(i > 0 && A[i-1] == C[i+j-1]){
            dp[i][j] = solve(i-1,j);
        }
        if(j > 0 && B[j-1] == C[i+j-1]){
            dp[i][j] = dp[i][j] || solve(i, j-1);
        }
        return dp[i][j];
    };
    return solve(n,m);
}


2. \n-m\ <= 1 just to confuse. 
Actually just simply either last character from s or from t. 

class Solution {
public:
    bool isInterleave(string s1, string s2, string s3) {
        int n = s1.size(), m = s2.size();
        if((int)s3.size() != n + m) return false;
        
        vector<vector<int>> dp(n, vector<int>(m, -1));
        
        
        function<int(int,int)> solve = [&](int i, int j){
            if(i < 0 && j < 0) return 1;
            if(i < 0 || j < 0){
                while(j >= 0 && s2[j] == s3[i+j+1]) j--;
                while(i >= 0 && s1[i] == s3[i+j+1]) i--;
                
                if(i < 0 && j < 0) return 1;
                return 0;
            }
            
            if(dp[i][j] != -1) return dp[i][j];
            int ans = 0;
            if(s3[i+j+1] == s1[i]){
                ans |= solve(i-1, j);
            }
            if(s3[i+j+1] == s2[j]){
                ans |= solve(i, j-1);
            }
            return dp[i][j] = ans;
        };
        
        return solve(n-1, m-1);
    }
};
