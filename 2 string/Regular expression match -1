here, * can match zero or more length sequence.


So, basically there are two conditions first one. 
if B[j] == '*' then it means we can have two choices either 
      -> solve(i-1, j) means matching to ith character.
      -> or solve(i, j-1) no matching done. 
      
      
Use of int8_t don't forget it can store true , false, -1. 
So mark it as true but return dp[i][j] in order to escape from type cast.

int Solution::isMatch(const string A, const string B) {
    int n = A.size(), m = B.size();
    vector<vector<int8_t>> dp(n+1, vector<int8_t>(m+1, -1));
    
    function<int8_t(int i, int j)> solve = [&](int i, int j){
        if(i == 0){
            while(j > 0 && B[j-1] == '*') j--;
            if(j == 0) return dp[i][j] = true;
            return dp[i][j] = false;
        }   
        if(j == 0) return dp[i][j] = false;
        
        if(dp[i][j] != -1) return dp[i][j];
        
        dp[i][j] = false;
        if(A[i-1] == B[j-1] || B[j-1] == '?'){
            return dp[i][j] = solve(i-1, j-1);
        }
        else if(B[j-1] == '*'){
            return dp[i][j] = solve(i-1, j) || solve(i, j-1);
        }
        return dp[i][j];
    }; 
    
    return solve(n, m);
}
