If constrainsts not allow dp then think of greedy or heap.

Here, curr_max = the maximum distance we can go . mx = global. 
we iterate from i = 1 to mx and if we encounter n-1 then return .
try populating curr_max as well. 

now we are at last of mx. so now see whether curr_max can do something better.

int Solution::jump(vector<int> &A) {
    int n = A.size();
    if(n == 1) return 0;
    int curr_max = A[0], mx = A[0], ans = 1;
    for(int i = 1; i <= mx; i++){
        if(i == n-1) return ans;
        
        curr_max = max(curr_max, i + A[i]);
        
        if(i == mx){
            if(curr_max <= i) return -1;
            mx = curr_max;
            ans++;
        }
    }
    return -1;
}
