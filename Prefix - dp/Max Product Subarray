Here, We will calculate product of subarray using kadane, 
Maintain two local_min and local_max if current no. is negative then we will mulitply this with local_min to get local_max or simply we can start new sequence from here.


int Solution::maxProduct(const vector<int> &A) {
    int local_max{A[0]} , local_min{A[0]} , ans{A[0]};
    for(int i = 1 ; i < A.size(); i++){
        if(A[i] < 0)   swap(local_max, local_min);
        local_max = max(A[i], local_max*A[i]);
        local_min = min(A[i], local_min*A[i]);
        ans = max(ans, local_max);
    }
    return ans;
}


class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int n = nums.size();
        // int curr_max = nums[0], curr_min = nums[0], g_max = nums[0];
        int g_max = nums[0];
        vector<vector<int>> dp(n,vector<int>(2,0));
        dp[0][0] = dp[0][1] = nums[0];
        for(int i = 1; i <n ; i++){
            int c_max = dp[i-1][0], c_min = dp[i-1][1];
            if(nums[i] <0){
                dp[i][0] = max(nums[i], c_min*nums[i]);
                dp[i][1] = min(nums[i], c_max*nums[i]);
            }
            else{
                dp[i][0] = max(nums[i],c_max*nums[i]);
                dp[i][1] = min(nums[i],c_min*nums[i]);
            }
            g_max = max(g_max, dp[i][0]);
//             if(nums[i] < 0){
//                 swap(curr_max, curr_min);
//             }
//             curr_max = max(nums[i], nums[i]*curr_max);
//             curr_min = min(nums[i], nums[i]*curr_min);
            
//             g_max = max(g_max, curr_max);
        }
        return g_max;
    }
};

// dp[i] = maximum prod if the substring has ending at i.
// dp[i][0]  = maximum;
// dp[i][1] = minimum;
